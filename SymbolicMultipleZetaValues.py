r"""
Symbolic Calculation of Multiple Zeta Values

Symbolic Calculation of Multiple Zeta Values using DataMine database.

EXAMPLES::

<Lots and lots of examples>

"""


# If Datamine file is not in the current directory, set dir_name to the location of the data file.
dir_name  = ""

MAX_WEIGHT = 22

import os
from sage.all import PolynomialRing, QQ, sage_eval, function

# hard coding of constant names up to weight 22, generated by get_constant_names()
constant_names = ['z11z3z3z5', 'z3', 'z9z3z7', 'z5z5z5z3', 'z9z3z5z5', 'z11z5', 'z5z3z5z3z3z3', 'z17z3', 'z9z3z5', 'z7', 'z11z3z5', 'z5z3z3z3', 'z10z4z5z1z1', 'z9z9z3', 'z5', 'z9z3z3', 'z7z3z5z3z3', 'z5z5z3', 'Sinf', 'z5z3', 'z7z7z3z3', 'z6z4z1z1', 'z9z5z5', 'z9z5z3', 'z15', 'z11', 'z11z3z7', 'z7z5z5z3', 'z6z4z5z5z1z1', 'z11z5z3z3', 'z7z3z3z3z5', 'z6z4z3z3z3z1z1', 'z15z7', 'z9z3z7z3', 'z9z5z7', 'z11z5z3', 'z7z3z3', 'z7z3z5z5', 'z6z6z5z1z1', 'z7z3z3z5z3', 'z10z8z1z1', 'z9z5z5z3', 'z11z3z5z3', 'z9z3z3z5', 'z17', 'z9z3z3z3', 'z13z3z3', 'z7z3z3z3z3', 'z8z2z3z7z1z1', 'z7z3z3z5', 'z7z5z7z3', 'z6z6z3z1z1', 'z10z6z3z1z1', 'z8z4z3z3z1z1', 'z19z3', 'z5z3z5z3z3', 'z6z6z5z3z1z1', 'z5z5z5z3z3', 'z15z3', 'z7z3z5', 'z9z5', 'z5z5z3z3', 'z13z7', 'z7z3z5z3', 'z8z6z5z1z1', 'z5z3z3z3z3z3', 'z5z3z3z3z3', 'z15z5', 'z6z4z3z5z1z1', 'z2', 'z5z5z3z5z3', 'z13z3', 'z10z6z1z1', 'z13z5', 'z7z5z5', 'z11z3z3z3', 'z9z3z5z3', 'z7z7z3z5', 'z13z3z5', 'z7z3', 'z5z5z3z3z3', 'z15z3z3', 'z9', 'z6z4z3z1z1', 'z11z3z3', 'z8z6z3z1z1', 'z13z3z3z3', 'z19', 'z7z3z3z3', 'z6z4z3z3z1z1', 'z11z3', 'z13z5z3', 'z9z3z3z3z3', 'z9z3', 'z17z5', 'z12z8z1z1', 'z8z6z3z3z1z1', 'z5z5z3z3z3z3', 'z8z6z1z1', 'z21', 'z5z3z3', 'z13', 'z7z3z3z3z3z3', 'z9z5z3z5']

if 1:
    ring_of_multiple_zeta_values = PolynomialRing(QQ,constant_names)
    constant_variable_from_name = {}
    for i,name in enumerate(constant_names):
        constant_variable_from_name[name] = ring_of_multiple_zeta_values.gen(i)

def get_index_from_string(s):
    if s=="0":return (1,)
    ks = []
    for c in s[::-1].split(","):
        if c=="1":
            ks.append(1)
        elif c=="0":
            ks[-1]+=1
    return tuple(ks)

def get_dict_svalue_from_index(weight):
    ret = {}
    for full_path in get_all_file_names(weight):
        for s_index, s_value in get_list_of_pairs_of_strings_of_index_and_values(full_path):
            s_index_dual = s_index[::-1].replace("0","x").replace("1","0").replace("x","1")
            index = get_index_from_string(s_index)
            dual_index = get_index_from_string(s_index_dual)
            assert index not in ret and dual_index not in ret
            ret[index] = s_value
            ret[dual_index] = s_value
    return ret

svalue_from_weight_index = [None for weight in range(MAX_WEIGHT+1)]
value_from_index = {}
def symbolic_multiple_zeta(*ks):
    r""""
    Return the symbolic multiple zeta values of inputs
    """
    if len(ks)==1 and ( type(ks[0])==list or type(ks[0])==tuple ):
        ks = ks[0]
    if len(ks)==0:
        return symbolic_multiple_zeta(2) / symbolic_multiple_zeta(2)
    ks = tuple(ks)
    try:
        weight = max(sum(ks), 10)
        assert ks[-1]>1 and 2<=weight<=MAX_WEIGHT and all(k>0 for k in  ks)
    except:
        print("Bad argument in mzvs: ", ks)
        assert False
    if svalue_from_weight_index[weight]==None:
        svalue_from_weight_index[weight] = get_dict_svalue_from_index(weight)

    if ks not in value_from_index:
        if ks not in  svalue_from_weight_index[weight]:
            print("Bad argument in mzvs: ", ks)
            assert False
        s_value = svalue_from_weight_index[weight][ks]
        value_from_index[ks] = sage_eval(s_value, locals = constant_variable_from_name)

    return value_from_index[ks]

def get_all_file_names(weight):
    import glob
    assert weight >=10
    if weight >=11:
        res = glob.glob(os.path.join(dir_name, f"""**/mzv{weight}*.prc"""), recursive = True) +\
         glob.glob(os.path.join(dir_name, f"""**/mzv{weight}*.h"""), recursive = True)
        return res
    else:
        return glob.glob(os.path.join(dir_name, f"""**/mzvlow.h"""), recursive = True)
        pass

def get_constant_names():
    constant_names = set()
    for weight in range(10,22+1):
        # print(f'{weight=}')
        print(f'weight = {weight}')
        for full_path in get_all_file_names(weight):
            for s_index, s_value in get_list_of_pairs_of_strings_of_index_and_values(full_path):
                if is_constant_string(s_value):
                    constant_names.add(s_value)
    return list(constant_names)


def get_list_of_pairs_of_strings_of_index_and_values(full_path):
    ret = []
    temp_value_string = ""
    temp_index_string = ""
    for line in open(full_path):
        line = line.strip().rstrip("\\")
        if line[:2]=="S\t":
            assert line[-1]==";"
        elif line[:4]=="Fill":
            if not temp_value_string == "" and  temp_index_string == "":
                # print(f'{temp_value_string=}, {temp_index_string=}')
                print(f'temp_value_string = {temp_value_string}, temp_index_string = {temp_index_string}')
                assert False

            l1,l2 = line[5:].split("=")
            temp_index_string = l1.split("(")[1].split(")")[0]
            temp_value_string = l2
        elif line.startswith("#") or line.startswith("CTable") or line.startswith("*--#") or line == "*" or line=="" or line.startswith("*	Note"):
            pass
        elif temp_index_string:
            temp_value_string += line
        else:
            print(line)
            assert False
        if temp_value_string[-1:]==";":
            ret.append( (temp_index_string, temp_value_string[:-1].strip()) )
            temp_value_string = ""
            temp_index_string = ""
    return ret

def is_constant_string(value_string):
    return "+" not in value_string and "-" not in value_string and "*" not in value_string


def get_dual_string(s):
    return s[::-1].replace("0","x").replace("1","0").replace("x","1")

def print_all_found_filenames():
    print("----------Program found following files--------")
    for weight in range(10,MAX_WEIGHT+1):
        for s in sorted( get_all_file_names(weight) ):
            print(s)
    print("--------------------------------------------")

def test():
    print("Test ....")
    if 1:
        #check sum formula
        def generate_all_index_with_depth(weight, depth):
            self = generate_all_index_with_depth
            if weight < 0 or depth<0:return []
            if weight==0 and depth==0:return [()]
            return [seq+(k,) for k in range(1,weight+1) for seq in self(weight-k,depth-1)]
        import time
        start = time.time()
        for weight in range(2,MAX_WEIGHT+1):
            for depth in range(1,weight-1):
                ret = 0
                # print(f'{weight=}, {depth=}')
                print(f'weight = {weight}, depth = {depth}')
                for ks in generate_all_index_with_depth(weight, depth):
                    if ks[-1]>1:
                        ret += symbolic_multiple_zeta(ks)
                assert( ret== symbolic_multiple_zeta(weight))
                # print(f'{time.time()-start=}')
                print(f'time.time()-start = {time.time()-start}')
    print("Finish test.")

if __name__=="__main__":
    test()
